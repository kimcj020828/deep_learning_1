import numpy as np

# 원앤 핫 방식
# def cross_entropy_error(y,t):
#     if y.ndim == 1:
#         t = t.reshape(1, t.size)
#         y = y.reshape(1, y.size)
        
#     batch_size = y.shape[0]
#     return -np.sum(t*np.log(y+1e-7))/batch_size

# 데이터의 수치가 원앤 핫이 아닌, 직접 수치가 주어지는 경우
def cross_entropy_error(y,t):
    if y.ndim == 1:
        t = t.reshape(1, t.size)
        y = y.reshape(1, y.size)
        
    batch_size = y.shape[0]
    return -np.sum(np.log(y[np.arange(batch_size), t] + 1e-7)) / batch_size


'''
왜 '정확도'라는 지표를 두고 '손실함수'라는 지표를 사용할까?
=> 정답은 신경망 학습에서의 '미분'의 역할에 있다.
신경망 학습에서는 최적의 매개변수(가중치와 편향)를 탐색할 때, 손실함수의 값을 가능한 작게하는 매개변수 값을 찾는다.
이때, 매개변수의 미분(정확히는 기울기)을 계산하고, 그 미분값을 단서로 매개변수의 값을 서서히 갱신하는 과정을 반복한다.

정확도를 지표로 삼아서는 안되는 이유는 미분값이 대부분의 장소에서 0이 되어 매개변수를 갱신할 수 없기 때문이다.
그렇다면, 대부분의 장소에서 0이 되는 이유는 무엇인가?

예를 들어 100장의 훈련데이터 중 32장을 올바로 인식한다고 하면 정확도는 32%이다.
이때, 가중치 매개변수의 값을 조금 바꾼다고 해도 여전히 32%로 동일 했을 것이다. 
혹 정확도가 개선된다 하더라도 그 값은 32.0123%식의 점진적 변화가 아닌 33~34퍼 같이 불연속적인 값이 될 것이다.

반면, 손실함수의 경우 0.92543..같은 수치로 나타나고 매개변수의 값이 변화하더라도 그에 반응하여 손실함수의 값도 연속적으로 변화한다.

이는, 활성화 함수로 '계단함수'를 채택하지 않는 이유와 같은 이유이다.
'''